// This file is generated by omniidl (C++ backend) - omniORB_4_3. Do not edit.

#include "echo.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_3;



void
CORBATest::Person::operator>>= (cdrStream& _n) const
{
    _n.marshalString(Name, 0);
    _n.marshalString(Surename, 0);
    _n.marshalString(Patronymic, 0);

}

void
CORBATest::Person::operator<<= (cdrStream& _n)
{
    Name = _n.unmarshalString(0);
    Surename = _n.unmarshalString(0);
    Patronymic = _n.unmarshalString(0);

}

CORBATest::Echo_ptr CORBATest::Echo_Helper::_nil() {
    return ::CORBATest::Echo::_nil();
}

::CORBA::Boolean CORBATest::Echo_Helper::is_nil(::CORBATest::Echo_ptr p) {
    return ::CORBA::is_nil(p);

}

void CORBATest::Echo_Helper::release(::CORBATest::Echo_ptr p) {
    ::CORBA::release(p);
}

void CORBATest::Echo_Helper::marshalObjRef(::CORBATest::Echo_ptr obj, cdrStream& s) {
    ::CORBATest::Echo::_marshalObjRef(obj, s);
}

CORBATest::Echo_ptr CORBATest::Echo_Helper::unmarshalObjRef(cdrStream& s) {
    return ::CORBATest::Echo::_unmarshalObjRef(s);
}

void CORBATest::Echo_Helper::duplicate(::CORBATest::Echo_ptr obj) {
    if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

CORBATest::Echo_ptr
CORBATest::Echo::_duplicate(::CORBATest::Echo_ptr obj)
{
    if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
    return obj;
}

CORBATest::Echo_ptr
CORBATest::Echo::_narrow(::CORBA::Object_ptr obj)
{
    if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
    _ptr_type e = (_ptr_type)obj->_PR_getobj()->_realNarrow(_PD_repoId);
    return e ? e : _nil();
}


CORBATest::Echo_ptr
CORBATest::Echo::_unchecked_narrow(::CORBA::Object_ptr obj)
{
    if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
    _ptr_type e = (_ptr_type)obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
    return e ? e : _nil();
}

CORBATest::Echo_ptr
CORBATest::Echo::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
    static _objref_Echo _the_nil_obj;
    return &_the_nil_obj;
#else
    static _objref_Echo* _the_nil_ptr = 0;
    if (!_the_nil_ptr) {
        omni::nilRefLock().lock();
        if (!_the_nil_ptr) {
            _the_nil_ptr = new _objref_Echo;
            registerNilCorbaObject(_the_nil_ptr);
        }
        omni::nilRefLock().unlock();
    }
    return _the_nil_ptr;
#endif
}

const char* CORBATest::Echo::_PD_repoId = "IDL:CORBATest/Echo:1.0";


CORBATest::_objref_Echo::~_objref_Echo() {

}


CORBATest::_objref_Echo::_objref_Echo(omniIOR* ior, omniIdentity* id) :
    omniObjRef(::CORBATest::Echo::_PD_repoId, ior, id, 1)


{
    _PR_setobj(this);
}

void*
CORBATest::_objref_Echo::_ptrToObjRef(const char* id)
{
    if (id == ::CORBATest::Echo::_PD_repoId)
        return (::CORBATest::Echo_ptr)this;

    if (id == ::CORBA::Object::_PD_repoId)
        return (::CORBA::Object_ptr)this;

    if (omni::strMatch(id, ::CORBATest::Echo::_PD_repoId))
        return (::CORBATest::Echo_ptr)this;

    if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
        return (::CORBA::Object_ptr)this;

    return 0;
}


//
// Code for CORBATest::Echo::reverseString

// Proxy call descriptor class. Mangled signature:
//  void_n_cCORBATest_mPersonSeq
class _0RL_cd_b2d9fa3de9b21dee_00000000
    : public omniCallDescriptor
{
public:
    inline _0RL_cd_b2d9fa3de9b21dee_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall = 0)
        : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
    {

    }

    void marshalArguments(cdrStream&);
    void unmarshalArguments(cdrStream&);

    void unmarshalReturnedValues(cdrStream&);
    void marshalReturnedValues(cdrStream&);


    static const char* const _user_exns[];

    CORBATest::PersonSeq_var arg_0_;
    CORBATest::PersonSeq* arg_0;
};

void _0RL_cd_b2d9fa3de9b21dee_00000000::marshalArguments(cdrStream& _n)
{
    (const CORBATest::PersonSeq&)*arg_0 >>= _n;

}

void _0RL_cd_b2d9fa3de9b21dee_00000000::unmarshalArguments(cdrStream& _n)
{
    arg_0_ = new CORBATest::PersonSeq;
    (CORBATest::PersonSeq&)arg_0_ <<= _n;
    arg_0 = &arg_0_.inout();

}

void _0RL_cd_b2d9fa3de9b21dee_00000000::marshalReturnedValues(cdrStream& _n)
{
    (const CORBATest::PersonSeq&)*arg_0 >>= _n;

}

void _0RL_cd_b2d9fa3de9b21dee_00000000::unmarshalReturnedValues(cdrStream& _n)
{
    (CORBATest::PersonSeq&)*arg_0 <<= _n;

}

const char* const _0RL_cd_b2d9fa3de9b21dee_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_b2d9fa3de9b21dee_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
    _0RL_cd_b2d9fa3de9b21dee_00000000* tcd = (_0RL_cd_b2d9fa3de9b21dee_00000000*)cd;
    CORBATest::_impl_Echo* impl = (CORBATest::_impl_Echo*)svnt->_ptrToInterface(CORBATest::Echo::_PD_repoId);
    impl->reverseString(*tcd->arg_0);


}

void CORBATest::_objref_Echo::reverseString(::CORBATest::PersonSeq& persons)
{
    _0RL_cd_b2d9fa3de9b21dee_00000000 _call_desc(_0RL_lcfn_b2d9fa3de9b21dee_10000000, "reverseString", 14);
    _call_desc.arg_0 = &(::CORBATest::PersonSeq&)persons;

    _invoke(_call_desc);



}

CORBATest::_pof_Echo::~_pof_Echo() {}


omniObjRef*
CORBATest::_pof_Echo::newObjRef(omniIOR* ior, omniIdentity* id)
{
    return new ::CORBATest::_objref_Echo(ior, id);
}


::CORBA::Boolean
CORBATest::_pof_Echo::is_a(const char* id) const
{
    if (omni::ptrStrMatch(id, ::CORBATest::Echo::_PD_repoId))
        return 1;

    return 0;
}

const CORBATest::_pof_Echo _the_pof_CORBATest_mEcho;

CORBATest::_impl_Echo::~_impl_Echo() {}


::CORBA::Boolean
CORBATest::_impl_Echo::_dispatch(omniCallHandle& _handle)
{
    const char* op = _handle.operation_name();

    if (omni::strMatch(op, "reverseString")) {

        _0RL_cd_b2d9fa3de9b21dee_00000000 _call_desc(_0RL_lcfn_b2d9fa3de9b21dee_10000000, "reverseString", 14, 1);

        _handle.upcall(this, _call_desc);
        return 1;
    }


    return 0;
}

void*
CORBATest::_impl_Echo::_ptrToInterface(const char* id)
{
    if (id == ::CORBATest::Echo::_PD_repoId)
        return (::CORBATest::_impl_Echo*)this;

    if (id == ::CORBA::Object::_PD_repoId)
        return (void*)1;

    if (omni::strMatch(id, ::CORBATest::Echo::_PD_repoId))
        return (::CORBATest::_impl_Echo*)this;

    if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
        return (void*)1;
    return 0;
}

const char*
CORBATest::_impl_Echo::_mostDerivedRepoId()
{
    return ::CORBATest::Echo::_PD_repoId;
}

POA_CORBATest::Echo::~Echo() {}

